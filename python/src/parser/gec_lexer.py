# Generated from gec_lexer.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,34,245,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,
        1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,
        1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,
        1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,
        1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,
        1,12,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,
        1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,
        1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,
        1,26,1,27,1,27,5,27,184,8,27,10,27,12,27,187,9,27,1,28,4,28,190,
        8,28,11,28,12,28,191,1,29,4,29,195,8,29,11,29,12,29,196,1,29,1,29,
        4,29,201,8,29,11,29,12,29,202,1,30,1,30,5,30,207,8,30,10,30,12,30,
        210,9,30,1,30,1,30,1,31,1,31,1,31,1,31,5,31,218,8,31,10,31,12,31,
        221,9,31,1,31,1,31,1,32,1,32,1,32,1,32,5,32,229,8,32,10,32,12,32,
        232,9,32,1,32,1,32,1,32,1,32,1,32,1,33,4,33,240,8,33,11,33,12,33,
        241,1,33,1,33,1,230,0,34,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,
        19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,
        41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,
        63,32,65,33,67,34,1,0,7,3,0,42,43,45,45,47,47,2,0,65,90,97,122,4,
        0,48,57,65,90,95,95,97,122,1,0,48,57,1,0,34,34,2,0,10,10,13,13,3,
        0,9,10,13,13,32,32,252,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,
        0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,
        0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,
        0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,
        0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,
        0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,
        0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,
        0,0,0,1,69,1,0,0,0,3,76,1,0,0,0,5,82,1,0,0,0,7,88,1,0,0,0,9,92,1,
        0,0,0,11,99,1,0,0,0,13,105,1,0,0,0,15,109,1,0,0,0,17,114,1,0,0,0,
        19,117,1,0,0,0,21,120,1,0,0,0,23,126,1,0,0,0,25,137,1,0,0,0,27,142,
        1,0,0,0,29,146,1,0,0,0,31,152,1,0,0,0,33,159,1,0,0,0,35,161,1,0,
        0,0,37,163,1,0,0,0,39,165,1,0,0,0,41,167,1,0,0,0,43,169,1,0,0,0,
        45,171,1,0,0,0,47,173,1,0,0,0,49,175,1,0,0,0,51,177,1,0,0,0,53,179,
        1,0,0,0,55,181,1,0,0,0,57,189,1,0,0,0,59,194,1,0,0,0,61,204,1,0,
        0,0,63,213,1,0,0,0,65,224,1,0,0,0,67,239,1,0,0,0,69,70,5,68,0,0,
        70,71,5,69,0,0,71,72,5,70,0,0,72,73,5,73,0,0,73,74,5,78,0,0,74,75,
        5,69,0,0,75,2,1,0,0,0,76,77,5,83,0,0,77,78,5,69,0,0,78,79,5,84,0,
        0,79,80,5,85,0,0,80,81,5,80,0,0,81,4,1,0,0,0,82,83,5,87,0,0,83,84,
        5,79,0,0,84,85,5,82,0,0,85,86,5,76,0,0,86,87,5,68,0,0,87,6,1,0,0,
        0,88,89,5,65,0,0,89,90,5,68,0,0,90,91,5,68,0,0,91,8,1,0,0,0,92,93,
        5,65,0,0,93,94,5,80,0,0,94,95,5,80,0,0,95,96,5,69,0,0,96,97,5,78,
        0,0,97,98,5,68,0,0,98,10,1,0,0,0,99,100,5,83,0,0,100,101,5,67,0,
        0,101,102,5,69,0,0,102,103,5,78,0,0,103,104,5,69,0,0,104,12,1,0,
        0,0,105,106,5,70,0,0,106,107,5,79,0,0,107,108,5,82,0,0,108,14,1,
        0,0,0,109,110,5,70,0,0,110,111,5,82,0,0,111,112,5,79,0,0,112,113,
        5,77,0,0,113,16,1,0,0,0,114,115,5,84,0,0,115,116,5,79,0,0,116,18,
        1,0,0,0,117,118,5,73,0,0,118,119,5,78,0,0,119,20,1,0,0,0,120,121,
        5,67,0,0,121,122,5,72,0,0,122,123,5,85,0,0,123,124,5,78,0,0,124,
        125,5,75,0,0,125,22,1,0,0,0,126,127,5,71,0,0,127,128,5,65,0,0,128,
        129,5,77,0,0,129,130,5,69,0,0,130,131,5,79,0,0,131,132,5,66,0,0,
        132,133,5,74,0,0,133,134,5,69,0,0,134,135,5,67,0,0,135,136,5,84,
        0,0,136,24,1,0,0,0,137,138,5,76,0,0,138,139,5,73,0,0,139,140,5,83,
        0,0,140,141,5,84,0,0,141,26,1,0,0,0,142,143,5,73,0,0,143,144,5,78,
        0,0,144,145,5,84,0,0,145,28,1,0,0,0,146,147,5,70,0,0,147,148,5,76,
        0,0,148,149,5,79,0,0,149,150,5,65,0,0,150,151,5,84,0,0,151,30,1,
        0,0,0,152,153,5,83,0,0,153,154,5,84,0,0,154,155,5,82,0,0,155,156,
        5,73,0,0,156,157,5,78,0,0,157,158,5,71,0,0,158,32,1,0,0,0,159,160,
        5,40,0,0,160,34,1,0,0,0,161,162,5,41,0,0,162,36,1,0,0,0,163,164,
        5,123,0,0,164,38,1,0,0,0,165,166,5,125,0,0,166,40,1,0,0,0,167,168,
        5,91,0,0,168,42,1,0,0,0,169,170,5,93,0,0,170,44,1,0,0,0,171,172,
        5,44,0,0,172,46,1,0,0,0,173,174,5,60,0,0,174,48,1,0,0,0,175,176,
        5,62,0,0,176,50,1,0,0,0,177,178,5,61,0,0,178,52,1,0,0,0,179,180,
        7,0,0,0,180,54,1,0,0,0,181,185,7,1,0,0,182,184,7,2,0,0,183,182,1,
        0,0,0,184,187,1,0,0,0,185,183,1,0,0,0,185,186,1,0,0,0,186,56,1,0,
        0,0,187,185,1,0,0,0,188,190,7,3,0,0,189,188,1,0,0,0,190,191,1,0,
        0,0,191,189,1,0,0,0,191,192,1,0,0,0,192,58,1,0,0,0,193,195,7,3,0,
        0,194,193,1,0,0,0,195,196,1,0,0,0,196,194,1,0,0,0,196,197,1,0,0,
        0,197,198,1,0,0,0,198,200,5,46,0,0,199,201,7,3,0,0,200,199,1,0,0,
        0,201,202,1,0,0,0,202,200,1,0,0,0,202,203,1,0,0,0,203,60,1,0,0,0,
        204,208,5,34,0,0,205,207,8,4,0,0,206,205,1,0,0,0,207,210,1,0,0,0,
        208,206,1,0,0,0,208,209,1,0,0,0,209,211,1,0,0,0,210,208,1,0,0,0,
        211,212,5,34,0,0,212,62,1,0,0,0,213,214,5,47,0,0,214,215,5,47,0,
        0,215,219,1,0,0,0,216,218,8,5,0,0,217,216,1,0,0,0,218,221,1,0,0,
        0,219,217,1,0,0,0,219,220,1,0,0,0,220,222,1,0,0,0,221,219,1,0,0,
        0,222,223,6,31,0,0,223,64,1,0,0,0,224,225,5,47,0,0,225,226,5,42,
        0,0,226,230,1,0,0,0,227,229,9,0,0,0,228,227,1,0,0,0,229,232,1,0,
        0,0,230,231,1,0,0,0,230,228,1,0,0,0,231,233,1,0,0,0,232,230,1,0,
        0,0,233,234,5,42,0,0,234,235,5,47,0,0,235,236,1,0,0,0,236,237,6,
        32,0,0,237,66,1,0,0,0,238,240,7,6,0,0,239,238,1,0,0,0,240,241,1,
        0,0,0,241,239,1,0,0,0,241,242,1,0,0,0,242,243,1,0,0,0,243,244,6,
        33,0,0,244,68,1,0,0,0,9,0,185,191,196,202,208,219,230,241,1,6,0,
        0
    ]

class gec_lexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    DEFINE = 1
    SETUP = 2
    WORLD = 3
    ADD = 4
    APPEND = 5
    SCENE = 6
    FOR = 7
    FROM = 8
    TO = 9
    IN = 10
    CHUNK = 11
    GAMEOBJECT = 12
    LIST = 13
    INT = 14
    FLOAT = 15
    STRING = 16
    LPAREN = 17
    RPAREN = 18
    LBRACE = 19
    RBRACE = 20
    LSQUARE = 21
    RSQUARE = 22
    COMMA = 23
    LT = 24
    GT = 25
    ASSIGN = 26
    OP_ARIT = 27
    ID = 28
    INT_LITERAL = 29
    FLOAT_LITERAL = 30
    STRING_LITERAL = 31
    COMMENT = 32
    BLOCK_COMMENT = 33
    WS = 34

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'DEFINE'", "'SETUP'", "'WORLD'", "'ADD'", "'APPEND'", "'SCENE'", 
            "'FOR'", "'FROM'", "'TO'", "'IN'", "'CHUNK'", "'GAMEOBJECT'", 
            "'LIST'", "'INT'", "'FLOAT'", "'STRING'", "'('", "')'", "'{'", 
            "'}'", "'['", "']'", "','", "'<'", "'>'", "'='" ]

    symbolicNames = [ "<INVALID>",
            "DEFINE", "SETUP", "WORLD", "ADD", "APPEND", "SCENE", "FOR", 
            "FROM", "TO", "IN", "CHUNK", "GAMEOBJECT", "LIST", "INT", "FLOAT", 
            "STRING", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LSQUARE", 
            "RSQUARE", "COMMA", "LT", "GT", "ASSIGN", "OP_ARIT", "ID", "INT_LITERAL", 
            "FLOAT_LITERAL", "STRING_LITERAL", "COMMENT", "BLOCK_COMMENT", 
            "WS" ]

    ruleNames = [ "DEFINE", "SETUP", "WORLD", "ADD", "APPEND", "SCENE", 
                  "FOR", "FROM", "TO", "IN", "CHUNK", "GAMEOBJECT", "LIST", 
                  "INT", "FLOAT", "STRING", "LPAREN", "RPAREN", "LBRACE", 
                  "RBRACE", "LSQUARE", "RSQUARE", "COMMA", "LT", "GT", "ASSIGN", 
                  "OP_ARIT", "ID", "INT_LITERAL", "FLOAT_LITERAL", "STRING_LITERAL", 
                  "COMMENT", "BLOCK_COMMENT", "WS" ]

    grammarFileName = "gec_lexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


