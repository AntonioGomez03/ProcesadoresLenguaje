import Navbar from "../components/Navbar";
import InfoCard from "../components/InfoCard";
import logo from "../assets/logo_geocraft.png";
import terrainExample from "../assets/terrain_example.jpg";
import organizacionProyecto from "../assets/organizacion_proyecto.png";

const About = () => {

    const markdownContent = `
# <img src="${logo}" alt="Emoji" width="30" style="vertical-align: middle;" /> GeoCraft

GeoCraft es un lenguaje que permite simplificar y automatizar el proceso de creaci√≥n de terrenos 3D en Unity.

<br />
<div align="center">
    <img src="${logo}" alt="Logo de GeoCraft" width="20%" />
    <br>
    <em>Logo de GeoCraft</em>
</div>
<br />

El objetivo de este proyecto es desarrollar una herramienta que utilice este lenguaje para complementar el trabajo de dise√±adores en la creaci√≥n de terrenos de manera procedural en Unity. 

La utilidad de esta herramienta radica en su capacidad para facilitar la generaci√≥n inicial de entornos y modelos que pueden ser tomados como base sobre la cual trabajar.

## üìö Fundamentos
Este lenguaje est√° basado en el modelo de trabajo de Unity y en la generaci√≥n procedural de terrenos (como en el videojuego **Minecraft**, basado en **chunks**).

<br />
<div align="center">
    <img src="${terrainExample}" alt="Ejemplo de GeoCraft" width="95%" />
</div>
<br />

### ‚ö°¬øQu√© es la generaci√≥n procedural?
T√©cnica utilizada en gr√°ficos por computador y videojuegos para crear escenas de manera autom√°tica, sin necesidad de dise√±arlos manualmente, en base a unas directrices.

### üß©¬øQu√© es un chunk?
Se refiere a una porci√≥n o bloque de datos que se maneja como una sola unidad. En el contexto de la generaci√≥n de terrenos, un chunk es una secci√≥n del mundo virtual que se carga y se procesa de manera independiente.

### üõ†Ô∏è Metodolog√≠a de Trabajo
El objetivo del proyecto es generar terrenos 3D en Unity de manera sencilla usando nuestro lenguaje. Nos basaremos en el concepto de chunks, que son secciones o "trozos" del terreno que se pueden manejar de manera individual.

El lenguaje tambi√©n permitir√° la generaci√≥n de objetos prefabricados, como √°rboles y vegetaci√≥n, dentro de cada chunk.

## üìä Organizaci√≥n del Proyecto
La idea del proyecto consiste en tomar un c√≥digo escrito en nuestro lenguaje espec√≠fico y pasarlo a trav√©s de un procesador de lenguaje dise√±ado para este fin. Al ejecutar este proceso, se generar√° una carpeta que contendr√° subcarpetas para cada escena definida en el c√≥digo. Cada una de estas escenas se traducir√° en un archivo de c√≥digo con la extensi√≥n .cs, el cual, al ser ejecutado en Unity, crear√° autom√°ticamente la escena correspondiente en el entorno 3D.

<br />
<div align="center">
    <img src="${organizacionProyecto}" alt="Organizaci√≥n del Proyecto" width="300" />
</div>
<br />

# üöÄ Tecnolog√≠as Utilizadas

[![Python][Python-logo]][Python-url]
[![Java][Java-logo]][Java-url]
[![JFlex][JFlex-logo]][JFlex-url]
[![ANTLR4][ANTLR4-logo]][ANTLR4-url]
[![CUP][CUP-logo]][CUP-url]

[Python-logo]: https://img.shields.io/badge/Python-3776AB?style=for-the-badge&logo=python&logoColor=white
[Python-url]: https://www.python.org
[Java-logo]: https://img.shields.io/badge/Java-DD0000?style=for-the-badge&logo=openjdk&logoColor=white
[Java-url]: https://www.java.com
[ANTLR4-logo]: https://img.shields.io/badge/ANTLR4-A80000?style=for-the-badge&logo=openjdk&logoColor=white
[ANTLR4-url]: https://www.antlr.org
[CUP-logo]: https://img.shields.io/badge/CUP-8E3A2D?style=for-the-badge&logo=openjdk&logoColor=white
[CUP-url]: http://www2.cs.tum.edu/projects/cup/
[JFlex-logo]: https://img.shields.io/badge/JFlex-1E7D3A?style=for-the-badge&logo=openjdk&logoColor=white
[JFlex-url]: http://jflex.de
`;
    return (
        <div className="page-container">
            <Navbar />
            <div className="about-content-container">
                <h1>About</h1>
                <InfoCard markdownContent={markdownContent} />
            </div>
        </div>
    );
};

export default About;